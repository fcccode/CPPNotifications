/*******************************************************************************
 * Copyright (c) 2012, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

/*!
 * @file            NotificationCenter.cpp
 * @author          Jean-David Gadina - www.xs-labs.com
 * @copyright       (c) 2012, XS-Labs
 */

#include "NotificationCenter.h"
#include <iostream>

namespace EOS
{
    NotificationCenter::NotificationCenter()
    {}

    NotificationCenter::~NotificationCenter()
    {}

    NotificationCenter & NotificationCenter::defaultCenter()
    {
        static NotificationCenter instance;
        
        return instance;
    }
    
    void NotificationCenter::addObserver( const Observer & observer, const std::string & name )
    {
        _notificationList::iterator i;
        
        i = this->_observers.find( name );
        
        if( i == this->_observers.end() )
        {
            this->_observers.insert( std::pair< std::string, _observerList >( name, _observerList() ) );
            
            i = this->_observers.find( name );
        }
        
        i->second.push_back( ( const void * )&( observer ) );
        
        this->_lock.unlock();
    }
    
    void NotificationCenter::removeObserver( const Observer & observer, const std::string & name )
    {
        _notificationList::iterator i;
        
        this->_lock.lock();
        
        i = this->_observers.find( name );
        
        if( i != this->_observers.end() )
        {
            i->second.remove( ( const void * )&( observer ) );
        }
        
        this->_lock.unlock();
    }
    
    void NotificationCenter::postNotification( const Notification & notification )
    {
        _notificationList::iterator i;
        _observerList::iterator     j;
        Observer                   * o;
        
        this->_lock.lock();
        
        i = this->_observers.find( notification.name() );
        
        if( i != this->_observers.end() )
        {
            for( j = i->second.begin(); j != i->second.end(); ++j )
            {
                o = ( Observer * )*( j );
                
                o->handleNotification( notification );
            }
        }
        
        this->_lock.unlock();
    }
    
    void NotificationCenter::postNotification( const std::string & name )
    {
        Notification n;
        
        n.name( name );
        
        this->postNotification( n );
    }
    
    void NotificationCenter::postNotification( const std::string & name, const Object & sender )
    {
        Notification n;
        
        n.name( name );
        n.sender( sender );
        
        this->postNotification( n );
    }
    
    void NotificationCenter::postNotification( const std::string & name, const Object & sender, const Notification::Infos & infos )
    {
        Notification n;
        
        n.name( name );
        n.sender( sender );
        n.infos( infos );
        
        this->postNotification( n );
    }
}

